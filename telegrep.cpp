/*
 * telegrep.cpp - –î–µ–º–æ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 * –í–µ—Ä—Å–∏—è: 1.0
 * –î–ª—è Gentoo Linux —Å OpenRC
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <regex>
#include <ctime>
#include <cstring>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/inotify.h>
#include <syslog.h>
#include <curl/curl.h>
#include <map>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
volatile sig_atomic_t g_running = 1;
volatile sig_atomic_t g_reload_config = 0;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
struct Config {
    std::string token;
    std::string chat_id;
    std::string pattern;
    std::string exceptions;
    std::string log_file = "/var/log/messages";
};

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
struct EventBuffer {
    std::vector<std::string> events;
    time_t last_send_time;
    int event_count;
    time_t last_mass_warning_time;

    EventBuffer() : last_send_time(0), event_count(0), last_mass_warning_time(0) {}
};

// Callback –¥–ª—è curl - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ string
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* userp) {
    userp->append((char*)contents, size * nmemb);
    return size * nmemb;
}

// URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Telegram API
std::string url_encode(const std::string& value) {
    std::ostringstream escaped;
    escaped.fill('0');
    escaped << std::hex;

    for (char c : value) {
        // –ù–µ –∫–æ–¥–∏—Ä—É–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
            escaped << c;
        } else {
            escaped << std::uppercase;
            escaped << '%' << std::setw(2) << int((unsigned char)c);
            escaped << std::nouppercase;
        }
    }

    return escaped.str();
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
std::string html_escape(const std::string& data) {
    std::string buffer;
    buffer.reserve(data.size() * 1.1); // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞

    for (char c : data) {
        switch(c) {
            case '&':  buffer.append("&amp;");  break;
            case '<':  buffer.append("&lt;");   break;
            case '>':  buffer.append("&gt;");   break;
            default:   buffer.push_back(c);     break;
        }
    }

    return buffer;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è token (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ ~45 —Å–∏–º–≤–æ–ª–æ–≤)
bool validate_token(const std::string& token) {
    if (token.length() < 40 || token.length() > 50) {
        return false;
    }

    std::regex token_regex("^[0-9]+:[A-Za-z0-9_-]+$");
    return std::regex_match(token, token_regex);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –º–∏–Ω—É—Å–∞)
bool validate_chat_id(const std::string& chat_id) {
    if (chat_id.empty() || chat_id.length() > 20) {
        return false;
    }

    std::regex chat_regex("^-?[0-9]+$");
    return std::regex_match(chat_id, chat_regex);
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
bool parse_config(const std::string& config_path, Config& config) {
    std::ifstream file(config_path);
    if (!file.is_open()) {
        syslog(LOG_ERR, "Cannot open config file: %s", config_path.c_str());
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0600)
    struct stat st;
    if (stat(config_path.c_str(), &st) == 0) {
        if ((st.st_mode & 0777) != 0600) {
            syslog(LOG_WARNING, "Config file permissions should be 0600, current: %o",
                   st.st_mode & 0777);
        }
    }

    std::string line;
    std::regex config_regex("^\\s*(\\w+)\\s*=\\s*\"([^\"]*)\"\\s*$");

    while (std::getline(file, line)) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (line.empty() || line[0] == '#') continue;

        std::smatch match;
        if (std::regex_match(line, match, config_regex)) {
            std::string key = match[1].str();
            std::string value = match[2].str();

            if (key == "token") config.token = value;
            else if (key == "chat_id") config.chat_id = value;
            else if (key == "pattern") config.pattern = value;
            else if (key == "exceptions") config.exceptions = value;
            else if (key == "log_file") config.log_file = value;
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (config.token.empty() || config.chat_id.empty() || config.pattern.empty()) {
        syslog(LOG_ERR, "Missing required config parameters");
        return false;
    }

    if (!validate_token(config.token)) {
        syslog(LOG_ERR, "Invalid token format");
        return false;
    }

    if (!validate_chat_id(config.chat_id)) {
        syslog(LOG_ERR, "Invalid chat_id format");
        return false;
    }

    return true;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
bool send_telegram_message(const Config& config, const std::string& message) {
    CURL* curl = curl_easy_init();
    if (!curl) {
        syslog(LOG_ERR, "Failed to initialize curl");
        return false;
    }

    std::string response;
    std::string url = "https://api.telegram.org/bot" + config.token + "/sendMessage";
    std::string post_fields = "chat_id=" + config.chat_id +
                              "&text=" + url_encode(message) +
                              "&parse_mode=HTML";

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, post_fields.c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 1L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 2L);

    CURLcode res = curl_easy_perform(curl);
    long http_code = 0;
    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
    curl_easy_cleanup(curl);

    if (res != CURLE_OK) {
        syslog(LOG_ERR, "Curl error: %s", curl_easy_strerror(res));
        return false;
    }

    if (http_code != 200) {
        syslog(LOG_ERR, "Telegram API error: HTTP %ld, Response: %s",
               http_code, response.c_str());
        return false;
    }

    return true;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
struct LogComponents {
    std::string timestamp;
    std::string hostname;
    std::string rest;
};

LogComponents parse_log_line(const std::string& line) {
    LogComponents comp;

    // Regex –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ syslog —Ñ–æ—Ä–º–∞—Ç–∞: "Oct 29 01:09:44 hostname rest..."
    std::regex log_regex(R"(^([A-Za-z]{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})\s+(\S+)\s+(.*)$)");
    std::smatch match;

    if (std::regex_match(line, match, log_regex)) {
        comp.timestamp = match[1].str();
        comp.hostname = match[2].str();
        comp.rest = match[3].str();
    } else {
        // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        comp.rest = line;
    }

    return comp;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ —Å —ç–º–æ–¥–∑–∏ –∏ HTML
std::string format_log_line(const std::string& line) {
    std::string escaped_line = html_escape(line);
    LogComponents comp = parse_log_line(escaped_line);

    std::string emoji = "üìã";
    std::string formatted;

    // HISTORY –∫–æ–º–∞–Ω–¥—ã - —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π
    if (comp.rest.find("HISTORY:") != std::string::npos) {
        emoji = "üß†";

        // –ò–∑–≤–ª–µ–∫–∞–µ–º UID, PID –∏ –∫–æ–º–∞–Ω–¥—É
        std::regex history_regex(R"(HISTORY:\s*PID=(\d+)\s+UID=(\d+)\s+(.+))");
        std::smatch match;

        if (std::regex_search(comp.rest, match, history_regex)) {
            std::string pid = match[1].str();
            std::string uid = match[2].str();
            std::string cmd = match[3].str();

            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
            if (std::regex_search(cmd, std::regex("^(ssh|scp|sftp)"))) emoji = "üîê";
            else if (std::regex_search(cmd, std::regex("^su(\\s|$)"))) emoji = "üë§";
            else if (std::regex_search(cmd, std::regex("^docker"))) emoji = "üê≥";
            else if (std::regex_search(cmd, std::regex("^(systemctl|rc-service|rc-update)"))) emoji = "üß©";
            else if (std::regex_search(cmd, std::regex("^(rm|rmdir)\\s+-.*r"))) emoji = "üóëÔ∏è";
            else if (std::regex_search(cmd, std::regex("^(vim|nano|vi|cat|less|tail|head)"))) emoji = "üìù";
            else if (std::regex_search(cmd, std::regex("^(cd|ls|pwd|find)"))) emoji = "üìÅ";
            else if (std::regex_search(cmd, std::regex("^(apt|emerge|yum|dnf|pacman|eix)"))) emoji = "üì¶";
            else if (std::regex_search(cmd, std::regex("^(screen|tmux)"))) emoji = "üñ•Ô∏è";

            if (uid == "0") {
                formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                          "‚îú <b><u>ROOT</u></b> PID:<code>" + pid + "</code> UID:<code>" + uid + "</code>\n"
                          "‚îî <code>" + cmd + "</code>";
            } else {
                formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                          "‚îú üë§ User PID:<code>" + pid + "</code> UID:<code>" + uid + "</code>\n"
                          "‚îî <code>" + cmd + "</code>";
            }
        }
    }
    // Kernel —Å–æ–±—ã—Ç–∏—è
    else if (comp.rest.find("kernel:") != std::string::npos) {
        emoji = "‚öôÔ∏è";
        std::string kernel_msg = comp.rest.substr(comp.rest.find("kernel:") + 8);

        if (std::regex_search(kernel_msg, std::regex("(error|fail|panic|oops|bug)",
            std::regex::icase))) {
            emoji = "üö®‚öôÔ∏è";
            kernel_msg = "<b>" + kernel_msg + "</b>";
        }
        else if (std::regex_search(kernel_msg, std::regex("(oom|out of memory)",
            std::regex::icase))) emoji = "üí•";
        else if (std::regex_search(kernel_msg, std::regex("(eth|wlan|br-|veth|device|link)"))) emoji = "üåê";
        else if (std::regex_search(kernel_msg, std::regex("(disk|mount|filesystem)"))) emoji = "üíæ";

        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî <i>" + kernel_msg + "</i>";
    }
    // SSH —Å–æ–±—ã—Ç–∏—è
    else if (std::regex_search(comp.rest, std::regex("(sshd|ssh).*(accepted|failed)",
        std::regex::icase))) {
        emoji = std::regex_search(comp.rest, std::regex("accepted", std::regex::icase)) ?
                "‚úÖüîê" : "‚ùåüîê";
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî <u>" + comp.rest + "</u>";
    }
    // Docker —Å–æ–±—ã—Ç–∏—è
    else if (std::regex_search(comp.rest, std::regex("(docker|container)", std::regex::icase))) {
        emoji = "üê≥";
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî <i>" + comp.rest + "</i>";
    }
    // –û—à–∏–±–∫–∏
    else if (std::regex_search(comp.rest, std::regex("(error|erro|fail|failed|critical|alert|emergency)",
        std::regex::icase))) {
        emoji = "üö®";
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî <b><u>" + comp.rest + "</u></b>";
    }
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    else if (std::regex_search(comp.rest, std::regex("(warn|warning)", std::regex::icase))) {
        emoji = "‚ö†Ô∏è";
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî <i>" + comp.rest + "</i>";
    }
    // Cron
    else if (std::regex_search(comp.rest, std::regex("(cron|CRON)"))) {
        emoji = "‚è∞";
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî " + comp.rest;
    }
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else {
        formatted = emoji + " <b>" + comp.timestamp + "</b> <code>" + comp.hostname + "</code>\n"
                  "‚îî " + comp.rest;
    }

    return formatted;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
void process_buffer(EventBuffer& buffer, const Config& config) {
    time_t current_time = time(nullptr);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 —Å–µ–∫—É–Ω–¥
    if (current_time - buffer.last_send_time < 10) {
        return;
    }

    if (!buffer.events.empty()) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: >50 —Å–æ–±—ã—Ç–∏–π = —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (buffer.event_count >= 50) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            if (current_time - buffer.last_mass_warning_time >= 300) {
                std::string message = "üö® <b>MASS WARNING</b>\n"
                                    "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ <u>" + std::to_string(buffer.event_count) +
                                    " —Å–æ–±—ã—Ç–∏–π</u> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥\n"
                                    "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!";

                if (send_telegram_message(config, message)) {
                    buffer.last_mass_warning_time = current_time;
                    syslog(LOG_WARNING, "Sent mass warning: %d events", buffer.event_count);
                }
            }
        } else {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            std::string message = "üìä <b>–°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫:</b> " +
                                std::to_string(buffer.event_count) + "\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

            for (const auto& event : buffer.events) {
                message += event + "\n\n";
            }

            // Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤
            if (message.length() > 3800) {
                message = message.substr(0, 3700) + "\n\n<i>... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]</i>";
            }

            if (send_telegram_message(config, message)) {
                syslog(LOG_INFO, "Sent message with %d events", buffer.event_count);
            }
        }
    }

    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
    buffer.events.clear();
    buffer.event_count = 0;
    buffer.last_send_time = current_time;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
void signal_handler(int signum) {
    if (signum == SIGTERM || signum == SIGINT) {
        g_running = 0;
        syslog(LOG_INFO, "Received shutdown signal");
    } else if (signum == SIGHUP) {
        g_reload_config = 1;
        syslog(LOG_INFO, "Received config reload signal");
    }
}

// –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
bool daemonize() {
    pid_t pid = fork();

    if (pid < 0) {
        return false;
    }

    if (pid > 0) {
        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
        exit(EXIT_SUCCESS);
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    if (setsid() < 0) {
        return false;
    }

    // –í—Ç–æ—Ä–æ–π fork –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    pid = fork();

    if (pid < 0) {
        return false;
    }

    if (pid > 0) {
        exit(EXIT_SUCCESS);
    }

    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    chdir("/");

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
    close(STDIN_FILENO);
    close(STDOUT_FILENO);
    close(STDERR_FILENO);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º /dev/null
    open("/dev/null", O_RDONLY); // stdin
    open("/dev/null", O_RDWR);   // stdout
    open("/dev/null", O_RDWR);   // stderr

    return true;
}

// –°–æ–∑–¥–∞–Ω–∏–µ PID —Ñ–∞–π–ª–∞
bool create_pid_file(const std::string& pid_file) {
    std::ofstream file(pid_file);
    if (!file.is_open()) {
        return false;
    }

    file << getpid() << std::endl;
    return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
void monitor_logs(const Config& config) {
    std::ifstream log_file(config.log_file);
    if (!log_file.is_open()) {
        syslog(LOG_ERR, "Cannot open log file: %s", config.log_file.c_str());
        return;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    log_file.seekg(0, std::ios::end);

    EventBuffer buffer;
    std::regex pattern_regex(config.pattern);
    std::regex exceptions_regex;
    bool has_exceptions = !config.exceptions.empty();

    if (has_exceptions) {
        exceptions_regex = std::regex(config.exceptions);
    }

    while (g_running) {
        std::string line;

        if (std::getline(log_file, line)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            bool matched = std::regex_search(line, pattern_regex);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if (matched && has_exceptions) {
                if (std::regex_search(line, exceptions_regex)) {
                    matched = false;
                }
            }

            if (matched) {
                std::string formatted = format_log_line(line);
                buffer.events.push_back(formatted);
                buffer.event_count++;
            }
        } else {
            // –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
            log_file.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—à–∏–±–æ–∫

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä
            process_buffer(buffer, config);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (g_reload_config) {
                Config new_config;
                if (parse_config("/opt/telegrep/settings.conf", new_config)) {
                    // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å config –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
                    syslog(LOG_INFO, "Config reload requested (restart needed for changes)");
                }
                g_reload_config = 0;
            }

            // –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å CPU
            usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    process_buffer(buffer, config);
}

int main(int argc, char* argv[]) {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º syslog
    openlog("telegrep", LOG_PID | LOG_CONS, LOG_DAEMON);

    // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    Config config;
    if (!parse_config("/opt/telegrep/settings.conf", config)) {
        syslog(LOG_ERR, "Failed to parse config");
        closelog();
        return 1;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º curl –≥–ª–æ–±–∞–ª—å–Ω–æ
    curl_global_init(CURL_GLOBAL_ALL);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    std::string startup_msg = "‚úÖ <b>Telegrep started</b>\n"
                             "üì° Monitoring: <code>" + config.log_file + "</code>\n"
                             "üîç Pattern: <code>" + config.pattern + "</code>";
    if (!config.exceptions.empty()) {
        startup_msg += "\nüö´ Exceptions: <code>" + config.exceptions + "</code>";
    }

    if (!send_telegram_message(config, startup_msg)) {
        syslog(LOG_ERR, "Cannot connect to Telegram. Check token and chat_id");
        curl_global_cleanup();
        closelog();
        return 1;
    }

    // –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ —Å -f –¥–ª—è foreground)
    bool foreground = false;
    if (argc > 1 && std::string(argv[1]) == "-f") {
        foreground = true;
    }

    if (!foreground) {
        if (!daemonize()) {
            syslog(LOG_ERR, "Failed to daemonize");
            curl_global_cleanup();
            closelog();
            return 1;
        }
    }

    // –°–æ–∑–¥–∞—ë–º PID —Ñ–∞–π–ª
    if (!create_pid_file("/var/run/telegrep.pid")) {
        syslog(LOG_WARNING, "Cannot create PID file");
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal(SIGTERM, signal_handler);
    signal(SIGINT, signal_handler);
    signal(SIGHUP, signal_handler);

    syslog(LOG_INFO, "Telegrep daemon started");

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_logs(config);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    send_telegram_message(config, "üõë <b>Telegrep stopped</b>");

    // –û—á–∏—Å—Ç–∫–∞
    unlink("/var/run/telegrep.pid");
    curl_global_cleanup();
    syslog(LOG_INFO, "Telegrep daemon stopped");
    closelog();

    return 0;
}
